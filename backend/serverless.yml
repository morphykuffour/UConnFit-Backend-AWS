service: UConnFit-Backend
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  iamRoleStatements:
  - Effect: 'Allow'
    Action:
      - 'lambda:InvokeFunction'
    Resource: "*"
  environment:
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource: "*"

plugins:
  - serverless-offline
  - serverless-add-api-key
  - serverless-plugin-warmup

custom:
  apiKeys:
    - name: noah-api-key

  warmup:
    default:
      enabled: true
      folderName: '.warmup'
      memorySize: 256
      name: warmer-default
      events:
        - schedule: 'cron(0/5 8-23:00 ? * MON-FRI *)' # 8:00am to 11:00pm | Every 5 minutes
      package:
        individually: true
        patterns:
          - '!../**'
          - '!../../**'
          - ./**
      timeout: 5
      concurrency: 1

functions:
  getMeals:
    runtime: python3.9
    handler: scraper.getMeals

    # Disable warmup
    warmup:
      default:
        enabled: false

    events:
      - http:
          path: /{dininghall}/{meal}
          method: get
          private: true
  # login and signup lambdas
  loginUser:
    handler: user/login.handler
    events:
      - http:
          path: user/login
          method: post
          cors: true
          private: true
    warmup:
      default:
        enabled: false

  signupUser:
    handler: user/signup.handler
    events:
      - http:
          path: user/signup
          method: post
          cors: true
          private: true
    warmup:
      default:
        enabled: false

  privateAPI:
    handler: user/private.handler
    events:
      - http:
          path: user/private
          method: post
          cors: true
          private: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
    warmup:
      default:
        enabled: false

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverless-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"
